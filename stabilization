//Jacob Hanson-Flores

#include <Wire.h>
#include "Adafruit_Sensor.h"
#include "Adafruit_BNO055.h"
#include "utility/imumaths.h"
#include "Servo.h"

Adafruit_BNO055 bno = Adafruit_BNO055(55);
sensors_event_t event;
Servo MyServo;  
Servo MyServo2; 
int LeftLED = 13;
int RightLED = 12;

void setup(void) 
{  

  Serial.begin(9600);
  Serial.println("Orientation Sensor Test"); Serial.println("");
  MyServo.attach(9);
  MyServo2.attach(6);
  pinMode(LeftLED, OUTPUT);
  /* Initialise the sensor */
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while(1);
  }
  
  delay(1000);
    
  bno.setExtCrystalUse(true);


float x1, x2;
float delta (x1,x2)
{ 
  float a = x1;
  float b = x2;
  float delt = a-b;
  return delt;
}

void reset(void)
{
  MyServo.write(90);
  MyServo2.write(90);
}

void douknowzeway(float z)
  {
    float l;
    l = z;
    if(l >= 0)
      {
        MyServo.write(105);
        MyServo2.write(105);
      }
    else
    {
      MyServo.write(75);
      MyServo2.write(75);
    }
    reset();
  }

void whereweat(float *airay[],time)
{
    /* Get a new sensor event */ 
  sensors_event_t event; 
  bno.getEvent(&event);
  int x = event.orientation.x;
  
  time_t t0 = now(); //Taken from time library. https://github.com/PaulStoffregen/Time
  float theta, dtheta, t;
  t = now()-t0
    do{
      theta = event.orientation.x;
      dtheta = pow(delta(airay, theta),2)
      if(dtheta > 15)
        {
          float thetavector = event.vector.x;
          douknowzeway(thetavector); //Feeds the current theta vector to our function.
          //Which then turns the servos in the proper direction
          
        }
    }while(t <= time)
    break;   
}

 
void loop(void) 
{
  //size = Insert the number of commands that are located in array where we are reading in positions
  for(i=0; i<size; i++)
  {
    whereweat(array[i]); //Runs the stabilization for the position located at array[i]
    rollcontrol(array[i++]); //Runs the roll control to the next location in array
    float yvec = event.vector.y; //Sets the yvec = the current vertical velocity
    if(yvec <= 0) //If the yvec falls below 0 then we have started to descend and the roll control is no longer necessary;
      {
        break; //Code stops
      }
  }
